//--------------------------------------------------------------------
//Cameron C. McIntyre
//SIMULATION OF PNS MYELINATED AXON
//This model is described in detail in:
//McIntyre CC, Richardson AG, and Grill WM. Modeling the excitability of
//mammalian nerve fibers: influence of afterpotentials on the recovery
//cycle. Journal of Neurophysiology 87:995-1006, 2002.
//---------------------------------------------------------------------
//--------------------------------------------------------------------
//Joao Couto
//SIMULATION OF PNS MYELINATED AXON WITH EXTRACELLULAR AND INTRACELLULAR ELECTRODE.
//This model is an adapted version of MRGaxon.hoc
//The following variables can be set:
//    
//    channelDescription can be set to:
//            0 - (deterministic) original channels from the NMODL description of McIntyre.
//            1 - (deterministic) translation to session file (file 'det_chan_37.ses' needs to be loaded before!).
//            2 - (stochastic)  translation of the same channels (file 'sto_chan_37.ses' needs to be loaded before!).
//
//    axonnodes		- number of nodes that are going to be used in the simulation
//    
//    fiberD			- diameter of the fiber, can be set to: 5.7, 7.3, 8.7, 10.0, 11.5, 12.8, 14.0, 15.0 or 16.0
//	waveformType	- type of waveform used in the extracellular stimulation
//		0 - square pulse
//		1 - sinusoidal current
//---------------------------------------------------------------------

{load_file("nrngui.hoc")}
//{load_proc("nrnmainmenu")}

objref fid, pattern, patternLag
pattern	= new Vector()
patternLag = new Vector()

//This procedure initializes the variables needed by MRGaxonHFS bypassing Python.
//and is not necessary for the python interface.
proc standalone_run() {    
    fid	= new File()
    //MODEL PARAMETERS
    channelDescription = 0
    axonnodes = 50
    fiberD = 10
    //SIMULATION PARAMETERS
    dt = 0.002
    tstop = 50
    //HFS PARAMETERS
    HFSreferenceNode = 25
    HFSdur = 50
    HFSfrequency = 200
    HFSpolarity	= -1.0
    HFSdelay = 0
    HFSpulsewidth = 0.09
    HFSamp = 1.154		//mA
    HFSwaveform	= 1			//1 sinusoid
    HFSx = 0			// all positions in micrometers
    HFSy = 0
    HFSz = 1000.0
    //INTRACELLULAR PARAMETERS
    intrinsicNode = 0
    intrinsicDur = 0.9 
    intrinsicAmp = 1
    // REQUIRES "pattern.txt" with the times at which to have the pattern.
    fid.ropen("pattern.txt")
    pattern.scanf(fid)
    patternLag.scanf(fid)
    for ii=0,patternLag.size-1 {
	patternLag.x[ii]=patternLag.x[ii]-0.05
    }
    fid.close()
}
//standalone_run()

//load_file("../../../../generic/det_chan_37.ses")
proc model_globals() {			
    celsius = 37			
    v_init = -80 	
    //---------------TOPOLOGICAL PARAMETERS-------------------------------
    paranodes1 = 2*(axonnodes-1)
    paranodes2 = 2*(axonnodes-1)	
    axoninter = 6*(axonnodes-1)			
    axontotal = axonnodes+paranodes1+paranodes2+axoninter
    total = axonnodes+paranodes1+paranodes2+axoninter
    //---------------MORPHOLOGICAL PARAMETERS-----------------------------
    //fiberD=5.7	/* choose from 5.7, 7.3, 8.7,*/ 
                        /* 10.0, 11.5, 12.8,*/
                        /* 14.0, 15.0, 16.0 */
    paralength1=3  
    nodelength=1.0
    space_p1=0.002  
    space_p2=0.004
    space_i=0.004
    //---------------ELETRICAL PARAMETERS---------------------------------
    rhoa = 0.7e6	//Ohm-um//
    mycm = 0.1		//uF/cm2/lamella membrane//
    mygm = 0.001	//S/cm2/lamella membrane//
    n_na = 200		// number of channels for the stochastic models...
    n_k	= int(n_na*3600/12000)
    rhoe = 5e6		//Ohm-um//resistivity of extracellular medium
    
    //-----------------------RECORDING-----------------------------------
    
    //recordAll = 0   /*Uncomment to record voltage from all nodes.*/
    
}
model_globals ()

//---------------INITIALIZE THE DEPENDENT VARIABLES---------------------
proc dependent_var() {
    // the fiber diameter can not be changed in the middle of the simulation.
    if (fiberD==5.7) {g=0.605 axonD=3.4 nodeD=1.9 paraD1=1.9 paraD2=3.4 deltax=500 paralength2=35 nl=80}
    if (fiberD==7.3) {g=0.630 axonD=4.6 nodeD=2.4 paraD1=2.4 paraD2=4.6 deltax=750 paralength2=38 nl=100}
    if (fiberD==8.7) {g=0.661 axonD=5.8 nodeD=2.8 paraD1=2.8 paraD2=5.8 deltax=1000 paralength2=40 nl=110}
    if (fiberD==10.0) {g=0.690 axonD=6.9 nodeD=3.3 paraD1=3.3 paraD2=6.9 deltax=1150 paralength2=46 nl=120}
    if (fiberD==11.5) {g=0.700 axonD=8.1 nodeD=3.7 paraD1=3.7 paraD2=8.1 deltax=1250 paralength2=50 nl=130}
    if (fiberD==12.8) {g=0.719 axonD=9.2 nodeD=4.2 paraD1=4.2 paraD2=9.2 deltax=1350 paralength2=54 nl=135}
    if (fiberD==14.0) {g=0.739 axonD=10.4 nodeD=4.7 paraD1=4.7 paraD2=10.4 deltax=1400 paralength2=56 nl=140}
    if (fiberD==15.0) {g=0.767 axonD=11.5 nodeD=5.0 paraD1=5.0 paraD2=11.5 deltax=1450 paralength2=58 nl=145}
    if (fiberD==16.0) {g=0.791 axonD=12.7 nodeD=5.5 paraD1=5.5 paraD2=12.7 deltax=1500 paralength2=60 nl=150}
    Rpn0 = (rhoa*.01)/(PI*((((nodeD/2)+space_p1)^2)-((nodeD/2)^2)))
    Rpn1 = (rhoa*.01)/(PI*((((paraD1/2)+space_p1)^2)-((paraD1/2)^2)))
    Rpn2 = (rhoa*.01)/(PI*((((paraD2/2)+space_p2)^2)-((paraD2/2)^2)))
    Rpx = (rhoa*.01)/(PI*((((axonD/2)+space_i)^2)-((axonD/2)^2)))
    interlength = (deltax-nodelength-(2*paralength1)-(2*paralength2))/6
    internode_distance = 2*paralength1+2*paralength2+6*interlength+nodelength
}
dependent_var()

//---------------CREATE SECTIONS AND APPEND CHANNELS-----------------
create node[axonnodes], MYSA[paranodes1], FLUT[paranodes2], STIN[axoninter]
access node[0]
objref s[total]
create electrode

proc initMRG() {
    print "Initializing MRGaxon."
    for i=0,axonnodes-1 {
	node[i]{
	    s[i] = new SectionRef()					
	    nseg = 1
	    diam = nodeD
	    L = nodelength
	    Ra = rhoa/10000
	    cm = 2
            if(channelDescription==0){
		//print "Using original model."
                insert axnode
            }
            if(channelDescription==1){
		print "Using model from the session file."
		//insert axnode_no_na_k
		//insert det_na
		//insert det_k
		ena = 50
		ek = -90
            }
            if(channelDescription==2){
		print "Using stochastic model from the session file."
                //insert axnode_no_na_k
            }
	    insert extracellular xraxial=Rpn0 xg=1e10 xc=0
	}
    }
    for i=0, paranodes1-1 {
	MYSA[i]{
	    s[axonnodes+i] = new SectionRef()
	    nseg = 1
	    diam = fiberD
	    L = paralength1
	    Ra = rhoa*(1/(paraD1/fiberD)^2)/10000
	    cm = 2*paraD1/fiberD
	    insert pas
	    g_pas = 0.001*paraD1/fiberD		
	    e_pas = v_init
	    insert extracellular xraxial=Rpn1 xg=mygm/(nl*2) xc=mycm/(nl*2)
	}
    }
    for i=0, paranodes2-1 {
	FLUT[i]{
	    s[axonnodes+paranodes1+i] = new SectionRef()
	    nseg = 1
	    diam = fiberD
	    L = paralength2
	    Ra = rhoa*(1/(paraD2/fiberD)^2)/10000
	    cm = 2*paraD2/fiberD
	    insert pas
	    g_pas = 0.0001*paraD2/fiberD		
	    e_pas = v_init
	    insert extracellular xraxial=Rpn2 xg=mygm/(nl*2) xc=mycm/(nl*2)
	}
    }
    for i=0, axoninter-1 {
	STIN[i]{
	    s[axonnodes+paranodes1+paranodes2+i]=new SectionRef()
	    nseg = 1
	    diam = fiberD
	    L = interlength
	    Ra = rhoa*(1/(axonD/fiberD)^2)/10000
	    cm = 2*axonD/fiberD
	    insert pas
	    g_pas = 0.0001*axonD/fiberD
	    e_pas = v_init
	    insert extracellular xraxial=Rpx xg=mygm/(nl*2) xc=mycm/(nl*2)
	}
    }	
    for i=0, axonnodes-2 {
	connect MYSA[2*i](0), node[i](1)
	connect FLUT[2*i](0), MYSA[2*i](1)
	connect STIN[6*i](0), FLUT[2*i](1)
	connect STIN[6*i+1](0), STIN[6*i](1)
	connect STIN[6*i+2](0), STIN[6*i+1](1)
	connect STIN[6*i+3](0), STIN[6*i+2](1)
	connect STIN[6*i+4](0), STIN[6*i+3](1)	
	connect STIN[6*i+5](0), STIN[6*i+4](1)	
	connect FLUT[2*i+1](0), STIN[6*i+5](1)	
	connect MYSA[2*i+1](0), FLUT[2*i+1](1)
	connect node[i+1](0), MYSA[2*i+1](1)	
    }   
}

proc initialize() {
    finitialize(v_init)
    fcurrent()
}

//---------------VECTORS AND OBJECT VARIABLES INITIALIZATION----------
objref Ve, X, Y, Z, exIClmp, inIClmp, apc, rec[axonnodes], rec_spk, v_first, v_ref, v_last

//----INITIALIZE THE LOCATION STIM WITH REGARDS TO EACH COMPARTMENT----
//	The reference node is at position zero.
proc XYZ_loc() {
    //---------------VECTORS AND OBJECT VARIABLES INITIALIZATION----------
    Ve = new Vector(total,0)
    X  = new Vector(total,0)
    Y  = new Vector(total,0)
    Z  = new Vector(total,0)
    reference_value = (HFSreferenceNode-1)*(2*paralength1+2*paralength2+6*interlength+nodelength)
    Y.x[0]=-reference_value
    for i=1,axonnodes-1 {
	Y.x[i]=Y.x[i-1]+(2*paralength1+2*paralength2+6*interlength+nodelength)	
    }	
    for i=0, axonnodes-2 {
	Y.x[axonnodes+2*i] = nodelength/2+paralength1/2+(2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value
	Y.x[axonnodes+2*i+1] = (1.5*paralength1+2*paralength2+6*interlength+nodelength) + (2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value  
	Y.x[axonnodes+paranodes1+2*i] = nodelength/2+paralength1+paralength2/2+(2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value
	Y.x[axonnodes+paranodes1+2*i+1] = nodelength/2+paralength1+1.5*paralength2+6*interlength+(2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value
	Y.x[axonnodes+paranodes1+paranodes2+6*i] = nodelength/2+paralength1+paralength2+interlength/2+(2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value
	Y.x[axonnodes+paranodes1+paranodes2+6*i+1] = nodelength/2+paralength1+paralength2+1.5*interlength+(2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value
	Y.x[axonnodes+paranodes1+paranodes2+6*i+2] = nodelength/2+paralength1+paralength2+2.5*interlength+(2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value
	Y.x[axonnodes+paranodes1+paranodes2+6*i+3] = nodelength/2+paralength1+paralength2+3.5*interlength+(2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value
	Y.x[axonnodes+paranodes1+paranodes2+6*i+4] = nodelength/2+paralength1+paralength2+4.5*interlength+(2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value
	Y.x[axonnodes+paranodes1+paranodes2+6*i+5] = nodelength/2+paralength1+paralength2+5.5*interlength+(2*paralength1+2*paralength2+6*interlength+nodelength)*i - reference_value
    }
    for i=0,total-1 {
	X.x[i]=0
	Z.x[i]=0
    }
}

//---------------CALCULATE THE ELECTRIC SCALAR POTENTIAL--------------
//Uses the aproximation of a current point source and assumes a uniform field.
proc calc_voltage() { local i 
    for i=0, total-1 {
	Ve.x[i]=(HFSamp*rhoe)/(4*PI*sqrt((HFSz-Z.x[i])^2+(HFSy-Y.x[i])^2+(HFSx-X.x[i])^2))
    }
}

objref rec_electrode
proc stimulus() {
    calc_voltage()
    //---------------INITIALIZE THE EXTRACELLULAR STIM----------
    electrode{
        if(HFSwaveform==0){
            exIClmp = new trainIClamp(0.5)
	    exIClmp.del = HFSdelay
    	    exIClmp.PW = HFSpulsewidth
	    exIClmp.train = HFSdur
    	    exIClmp.freq = HFSfrequency
	    exIClmp.amp = HFSpolarity
        }
        if(HFSwaveform==1){
            exIClmp = new SinClamp(0.5)
	    exIClmp.del = HFSdelay
    	    exIClmp.dur = HFSdur
	    exIClmp.freq = HFSfrequency
    	    exIClmp.pkamp = HFSpolarity
        }	
    }
    
    // UNCOMMENT TO RECORD ELECTRODE
    rec_electrode = new Vector()
    rec_electrode.record(&exIClmp.i)
    rec_electrode.clear()
    //
    
    //---------------INITIALIZE THE INTRACELLULAR STIM----------
    node[intrinsicNode] {           
        // inject pattern in one of the ends of the axon.
	inIClmp = new IClamp(0.5)
	inIClmp.del = -1.0
	inIClmp.dur = intrinsicDur
	inIClmp.amp = intrinsicAmp
	pattern.play(&inIClmp.del, patternLag)
    }
}

//---------------DEFINES WHAT TO DO AT EACH TIMESTEP--------------
proc advance() { local i 
    // Set Vextracellular using neurons mechanisms.
    for ii=0,total-1 { 
	s[ii].sec.e_extracellular(0.5)=(exIClmp.i)*Ve.x[ii]
    }
    fadvance()
}

proc makeRecorders() {
    v_first = new Vector()
    v_ref = new Vector()
    v_last = new Vector()
    v_first.record(&node[0].v(0.5))
    v_ref.record(&node[HFSreferenceNode].v(0.5))
    v_last.record(&node[axonnodes-1].v(0.5))
    //---------------RECORD ACTION POTENTIAL TIMESTAMPS---------
    node[axonnodes-1] {
        apc = new APCount(0.5)
	apc.thresh = -15
        rec_spk = new Vector()
        apc.record(rec_spk)
    }//RECORDS INTO REC_SPK
    
    //---------------RECORD ALL VOLTAGE TRACES (if recordAll)---------
    if(recordAll) {
        for ii=0,axonnodes-1 {
            rec[ii] = new Vector()
            rec[ii].record(&node[ii].v(0.5))
        }
    }
}

proc buildModel() {
    initMRG()
    XYZ_loc()
    stimulus()
    initialize()
    print "Built MRGaxon."
}

proc resetModel() {
    XYZ_loc()
    stimulus()
    initialize()
    init()
    //print "Reset MRGaxon."
}
